{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/felipesilva/nlw05/nlw-react-05-Podcast/src/context/PlayerContext.tsx\",\n    _this = this,\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useState, useContext } from 'react';\nexport var PlayerContext = /*#__PURE__*/createContext({});\nexport var PlayerContextProvider = function PlayerContextProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      episodeList = _useState[0],\n      setEpisodeList = _useState[1];\n\n  var _useState2 = useState(0),\n      currentEpisodeIndex = _useState2[0],\n      setCurrentEpisodeIndex = _useState2[1];\n\n  var _useState3 = useState(false),\n      isPlaying = _useState3[0],\n      setIsPlaying = _useState3[1];\n\n  var _useState4 = useState(false),\n      isLooping = _useState4[0],\n      setIsLooping = _useState4[1];\n\n  var _useState5 = useState(false),\n      isShuffling = _useState5[0],\n      setIsShuffling = _useState5[1];\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping);\n  }\n\n  function toggleShuffle() {\n    setIsShuffling(!isShuffling);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  var hasPrevious = currentEpisodeIndex > 0;\n  var hasNext = currentEpisodeIndex + 1 < episodeList.length;\n\n  function playNext() {\n    if (hasNext) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList: episodeList,\n      currentEpisodeIndex: currentEpisodeIndex,\n      play: play,\n      hasPrevious: hasPrevious,\n      playList: playList,\n      hasNext: hasNext,\n      isShuffling: isShuffling,\n      toggleShuffle: toggleShuffle,\n      playNext: playNext,\n      playPrevious: playPrevious,\n      toggleLoop: toggleLoop,\n      isLooping: isLooping,\n      isPlaying: isPlaying,\n      togglePlay: togglePlay,\n      setPlayingState: setPlayingState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(PlayerContextProvider, \"YSXWY8OfLfVxd5To+FHcHi+GAY0=\");\n\n_c = PlayerContextProvider;\nexport var usePlayer = function usePlayer() {\n  _s2();\n\n  return useContext(PlayerContext);\n};\n\n_s2(usePlayer, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerContextProvider\");","map":{"version":3,"sources":["/Users/felipesilva/nlw05/nlw-react-05-Podcast/src/context/PlayerContext.tsx"],"names":["createContext","useState","useContext","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","isLooping","setIsLooping","isShuffling","setIsShuffling","play","episode","playList","list","index","togglePlay","toggleLoop","toggleShuffle","setPlayingState","state","hasPrevious","hasNext","length","playNext","playPrevious","usePlayer"],"mappings":"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","sourcesContent":["import { createContext, useState, ReactNode, useContext } from 'react';\n\ntype Episode = {\n  title: string;\n  members: string;\n  thumbnail: string;\n  duration: number;\n  url: string;\n};\n\ntype PlayerContextData = {\n  episodeList: Episode[];\n  currentEpisodeIndex: number;\n  isPlaying: boolean;\n  isLooping: boolean;\n  isShuffling: boolean;\n  play: (episode: Episode) => void;\n  setPlayingState: (state: boolean) => void;\n  togglePlay: () => void;\n  toggleLoop: () => void;\n  toggleShuffle: () => void;\n  playList: (list: Episode[], index: number) => void;\n  playNext: () => void;\n  playPrevious: () => void;\n  hasNext:boolean;\n  hasPrevious:boolean;\n};\n\nexport const PlayerContext = createContext({} as PlayerContextData);\n\ntype PlayerContextProviderProps = {\n  children: ReactNode;\n};\n\nexport const PlayerContextProvider =({ children }: PlayerContextProviderProps )=>{\n  const [episodeList, setEpisodeList] = useState([]);\n  const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isLooping, setIsLooping] = useState(false);\n  const [isShuffling, setIsShuffling] = useState(false);\n\n  function play(episode: Episode) {\n    setEpisodeList([episode])\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n  function playList(list: Episode[], index: number) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n\n  }\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping);\n  }\n\n  function toggleShuffle() {\n    setIsShuffling(!isShuffling);\n  }\n\n  function setPlayingState(state: boolean) {\n    setIsPlaying(state);\n  }\n\n  const hasPrevious = currentEpisodeIndex > 0 ;\n\n  const hasNext = (currentEpisodeIndex + 1) <episodeList.length;\n\n  function playNext() {\n    if (hasNext) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1)\n    }\n  }\n\n  return (\n    <PlayerContext.Provider value={{\n      episodeList,\n      currentEpisodeIndex,\n      play,\n      hasPrevious,\n      playList,\n      hasNext,\n      isShuffling,\n      toggleShuffle,\n      playNext,\n      playPrevious,\n      toggleLoop,\n      isLooping,\n      isPlaying,\n      togglePlay,\n      setPlayingState\n    }}>\n      { children}\n    </PlayerContext.Provider>\n  );\n}\n\nexport const usePlayer = () => {\n  return useContext(PlayerContext);\n}"]},"metadata":{},"sourceType":"module"}