{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/felipesilva/nlw05/nlw-react-05-Podcast/src/context/PlayerContext.tsx\";\nimport { createContext, useState, useContext } from 'react';\nexport const PlayerContext = /*#__PURE__*/createContext({});\nexport const PlayerContextProvider = ({\n  children\n}) => {\n  const {\n    0: episodeList,\n    1: setEpisodeList\n  } = useState([]);\n  const {\n    0: currentEpisodeIndex,\n    1: setCurrentEpisodeIndex\n  } = useState(0);\n  const {\n    0: isPlaying,\n    1: setIsPlaying\n  } = useState(false);\n  const {\n    0: isLooping,\n    1: setIsLooping\n  } = useState(false);\n  const {\n    0: isShuffling,\n    1: setIsShuffling\n  } = useState(false);\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping);\n  }\n\n  function toggleShuffle() {\n    setIsShuffling(!isShuffling);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  function clearPlayerState() {\n    setEpisodeList([]);\n    setCurrentEpisodeIndex(0);\n  }\n\n  const hasPrevious = currentEpisodeIndex > 0;\n  const hasNext = isShuffling || currentEpisodeIndex + 1 < episodeList.length;\n\n  function playNext() {\n    if (isShuffling) {\n      const nextRandomEpisodeIndex = Math.floor(Math.random() * episodeList.length);\n      setCurrentEpisodeIndex(nextRandomEpisodeIndex);\n    } else if (hasNext) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList,\n      currentEpisodeIndex,\n      play,\n      hasPrevious,\n      playList,\n      hasNext,\n      isShuffling,\n      toggleShuffle,\n      playNext,\n      playPrevious,\n      toggleLoop,\n      clearPlayerState,\n      isLooping,\n      isPlaying,\n      togglePlay,\n      setPlayingState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\nexport const usePlayer = () => {\n  return useContext(PlayerContext);\n};","map":{"version":3,"sources":["/Users/felipesilva/nlw05/nlw-react-05-Podcast/src/context/PlayerContext.tsx"],"names":["createContext","useState","useContext","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","isLooping","setIsLooping","isShuffling","setIsShuffling","play","episode","playList","list","index","togglePlay","toggleLoop","toggleShuffle","setPlayingState","state","clearPlayerState","hasPrevious","hasNext","length","playNext","nextRandomEpisodeIndex","Math","floor","random","playPrevious","usePlayer"],"mappings":"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","sourcesContent":["import { createContext, useState, ReactNode, useContext } from 'react';\n\ntype Episode = {\n  title: string;\n  members: string;\n  thumbnail: string;\n  duration: number;\n  url: string;\n};\n\ntype PlayerContextData = {\n  episodeList: Episode[];\n  currentEpisodeIndex: number;\n  isPlaying: boolean;\n  isLooping: boolean;\n  isShuffling: boolean;\n  play: (episode: Episode) => void;\n  setPlayingState: (state: boolean) => void;\n  togglePlay: () => void;\n  toggleLoop: () => void;\n  toggleShuffle: () => void;\n  playList: (list: Episode[], index: number) => void;\n  playNext: () => void;\n  playPrevious: () => void;\n  clearPlayerState: () => void;\n  hasNext:boolean;\n  hasPrevious:boolean;\n};\n\nexport const PlayerContext = createContext({} as PlayerContextData);\n\ntype PlayerContextProviderProps = {\n  children: ReactNode;\n};\n\nexport const PlayerContextProvider =({ children }: PlayerContextProviderProps )=>{\n  const [episodeList, setEpisodeList] = useState([]);\n  const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isLooping, setIsLooping] = useState(false);\n  const [isShuffling, setIsShuffling] = useState(false);\n\n  function play(episode: Episode) {\n    setEpisodeList([episode])\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n  function playList(list: Episode[], index: number) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n\n  }\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping);\n  }\n\n  function toggleShuffle() {\n    setIsShuffling(!isShuffling);\n  }\n\n  function setPlayingState(state: boolean) {\n    setIsPlaying(state);\n  }\n  \n  function clearPlayerState() {\n    setEpisodeList([]);\n    setCurrentEpisodeIndex(0);\n  }\n\n  const hasPrevious = currentEpisodeIndex > 0 ;\n\n  const hasNext = isShuffling || (currentEpisodeIndex + 1) <episodeList.length;\n\n  function playNext() {\n    if(isShuffling) {\n      const nextRandomEpisodeIndex = Math.floor(Math.random() * episodeList.length);\n      setCurrentEpisodeIndex(nextRandomEpisodeIndex);\n    } else if(hasNext) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1)\n    }\n  }\n\n  return (\n    <PlayerContext.Provider value={{\n      episodeList,\n      currentEpisodeIndex,\n      play,\n      hasPrevious,\n      playList,\n      hasNext,\n      isShuffling,\n      toggleShuffle,\n      playNext,\n      playPrevious,\n      toggleLoop,\n      clearPlayerState,\n      isLooping,\n      isPlaying,\n      togglePlay,\n      setPlayingState\n    }}>\n      { children}\n    </PlayerContext.Provider>\n  );\n}\n\nexport const usePlayer = () => {\n  return useContext(PlayerContext);\n}"]},"metadata":{},"sourceType":"module"}